<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Off"
      internalLogFile="${basedir}/internal-nlog.txt"> <!-- Find this file internal-nlog.txt in the prod's published folder or bin\Debug\.netx.0. folder in dev.-->

	<!-- The NLog internal log file is used to log events from within the NLog framework itself. This can be very useful 
		for troubleshooting issues with your NLog configuration or understanding why certain log events are not being processed
		as expected. Set internalLogLevel to one of the following : Trace, Debug, Information, Warning, Error, Critical to 
		start logging NLog internal events. Trace means everything will be logged, Debug means Debug+, Information means Information+. Likewise.-->

	<targets>
		<target name="database" xsi:type="Database">
			<connectionString>Data Source=(LocalDb)\.\.;Database=SchoolProd;Integrated Security=true;MultipleActiveResultSets=True;</connectionString>
			<commandText>
				INSERT INTO Logs(CreatedOn,Message,Level,Exception,StackTrace,Logger,Url) VALUES(@datetime,@msg,@level,@exception,@trace,@logger,@url)
			</commandText>
			<parameter name="@datetime" layout="${date}" />
			<parameter name="@msg" layout="${message}" />
			<parameter name="@level" layout="${level}" />
			<parameter name="@exception" layout="${exception}" />
			<parameter name="@trace" layout="${stacktrace}" />
			<parameter name="@logger" layout="${logger}" />
			<parameter name="@url" layout="${aspnet-request-url}" />
		</target>
	</targets>

	<!--Need to create Logs table manually in the production DB. Use the below query.
		CREATE TABLE Logs
		(
		Id INT IDENTITY(1,1) PRIMARY KEY,
		CreatedOn DATETIME,
		Message NVARCHAR(MAX),
		Level NVARCHAR(50),
		Exception NVARCHAR(MAX),
		StackTrace NVARCHAR(MAX),
		Logger NVARCHAR(256),
		Url NVARCHAR(2048)
		)-->

	<!--Refer appSettings.Environment.json file.
		We skip until ${configsetting:item=Logging.SkipUntil.XYZ} for each configured logger.
		We write from ${configsetting:item=Logging.WriteFrom.XYZ} for each configured logger.
		The key thing here is the final attribute. Without that, the wildcard * rule will also be considered for each logger. -->
	<rules>
		<logger name="Microsoft.Hosting.Lifetime" final="true" maxlevel="${configsetting:item=Logging.SkipUntil.MicrosoftHostingLifetime}" />
		<logger name="Microsoft.Hosting.Lifetime" final="true" minLevel="${configsetting:item=Logging.WriteFrom.MicrosoftHostingLifetime}" writeTo="database" />

		<logger name="Microsoft.AspNetCore.Hosting.Diagnostics" final="true" maxlevel="${configsetting:item=Logging.SkipUntil.MicrosoftAspNetCoreHostingDiagnostics}" />
		<logger name="Microsoft.AspNetCore.Hosting.Diagnostics" final="true" minlevel="${configsetting:item=Logging.WriteFrom.MicrosoftAspNetCoreHostingDiagnostics}" writeTo="database"/>

		<logger name="Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler" final="true" maxlevel="${configsetting:item=Logging.SkipUntil.MicrosoftAspNetCoreAuthenticationJwtBearerJwtBearerHandler}" />
		<logger name="Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler" final="true" minLevel="${configsetting:item=Logging.WriteFrom.MicrosoftAspNetCoreAuthenticationJwtBearerJwtBearerHandler}" writeTo="database" />

		<logger name="Microsoft.AspNetCore.Authorization.DefaultAuthorizationService" final="true" maxlevel="${configsetting:item=Logging.SkipUntil.MicrosoftAspNetCoreAuthorizationDefaultAuthorizationService}" />
		<logger name="Microsoft.AspNetCore.Authorization.DefaultAuthorizationService" final="true" minlevel="${configsetting:item=Logging.WriteFrom.MicrosoftAspNetCoreAuthorizationDefaultAuthorizationService}" writeTo="database"/>

		<logger name="SchoolWeb.API.*" final="true" maxlevel="${configsetting:item=Logging.SkipUntil.SchoolWebAPI}" />
		<logger name="SchoolWeb.API.*" final="true" minLevel="${configsetting:item=Logging.WriteFrom.SchoolWebAPI}" writeTo="database" />

		<logger name="*" minlevel="${configsetting:item=Logging.LogLevel.Default}" writeTo="database" />
	</rules>
</nlog>