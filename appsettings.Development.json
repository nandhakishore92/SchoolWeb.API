{
    // ConnectionStrings(both here and in the NLog section) and JwtTokenSettings have to be moved to a secret store like Azure Key Vaults Or Environment Variables.
    "ConnectionStrings": {
        "SchoolDbContext": "Data Source=(LocalDb)\\.\\.;Database=SchoolProd;Integrated Security=true;MultipleActiveResultSets=True;"
    },

    "JwtTokenSettings": {
        "ValidIssuer": "https://localhost:7116",
        "ValidAudience": "ValidAudience",
        "SymmetricSecurityKey": "fvh8456477hth44j6wfds98bq9hp8bqh9ubq9gjig3qr0[94vj5",
        "JwtRegisteredClaimNamesSub": "345h098bb8reberbwr4vvb8945"
    },

    "NLog": {
        // *************************************************** README ****************************************************
        // The NLog internal log file "internal-nlog.txt" can be found in the prod's published folder or bin\Debug\.netx.0. 
        // folder in dev. This file can be very useful for understanding why certain log events are not being processed as 
        // expected. Set "internalLogLevel" to one of the following : Trace, Debug, Information, Warning, Error, Critical
        // to start logging in the above file. Trace means everything will be logged, Debug means Debug+, Information means
        // Information+. Likewise. The "targets" section defines where the actual logs will be logged. Currently, we are 
        // saving in the Logs table in the database. The "rules" section defines the rules for each log events. Currently, 
        // we skip until maxLevel for each configured logger and we write from minLevel for each configured logger. The key 
        // thing here is the final attribute. Without that, the wildcard * rule will also be considered for each logger.
        // Need to create Logs table manually in the production DB before using NLog. Use the below query.
        // CREATE TABLE Logs
        // (Id INT IDENTITY(1,1) PRIMARY KEY,
        // CreatedOn DATETIME,
        // Message NVARCHAR(MAX),
        // Level NVARCHAR(50),
        // Exception NVARCHAR(MAX),
        // StackTrace NVARCHAR(MAX),
        // Logger NVARCHAR(256),
        // Url NVARCHAR(2048))
        "autoReload": true,
        "throwConfigExceptions": true,
        "internalLogLevel": "Off",
        "internalLogFile": "${basedir}\\internal-nlog.txt",
        "targets": {
            "database": {
                "type": "Database",
                "commandText": "INSERT INTO Logs(CreatedOn,Message,Level,Exception,StackTrace,Logger,Url) VALUES(@datetime,@msg,@level,@exception,@trace,@logger,@url)",
                "parameters": [
                    {
                        "name": "@datetime",
                        "layout": "${date}"
                    },
                    {
                        "name": "@msg",
                        "layout": "${message}"
                    },
                    {
                        "name": "@level",
                        "layout": "${level}"
                    },
                    {
                        "name": "@exception",
                        "layout": "${exception}"
                    },
                    {
                        "name": "@trace",
                        "layout": "${stacktrace}"
                    },
                    {
                        "name": "@logger",
                        "layout": "${logger}"
                    },
                    {
                        "name": "@url",
                        "layout": "${aspnet-request-url}"
                    }
                ],
                "dbProvider": "Microsoft.Data.SqlClient",
                "connectionString": "Data Source=(LocalDb)\\.\\.;Database=SchoolProd;Integrated Security=true;MultipleActiveResultSets=True;"
            }
        },
        "rules": [
            {
                "logger": "Microsoft.Hosting.Lifetime",
                "final": "true",
                "maxLevel": "Information" // Set this to Debug or lower to check logs for debugging performance.
            },
            {
                "logger": "Microsoft.Hosting.Lifetime",
                "final": "true",
                "minLevel": "Warning", // Set this to Information or lower to check logs for debugging performance.
                "writeTo": "database"
            },
            {
                "logger": "Microsoft.AspNetCore.Hosting.Diagnostics",
                "final": "true",
                "maxLevel": "Information" // Set this to Debug or lower to check logs for debugging performance.
            },
            {
                "logger": "Microsoft.AspNetCore.Hosting.Diagnostics",
                "final": "true",
                "minLevel": "Warning", // Set this to Information or lower to check logs for debugging performance.
                "writeTo": "database"
            },
            {
                "logger": "Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler",
                "final": "true",
                "maxLevel": "Information"
            },
            {
                "logger": "Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler",
                "final": "true",
                "minLevel": "Warning",
                "writeTo": "database"
            },
            {
                "logger": "Microsoft.AspNetCore.Authorization.DefaultAuthorizationService",
                "final": "true",
                "maxLevel": "Information"
            },
            {
                "logger": "Microsoft.AspNetCore.Authorization.DefaultAuthorizationService",
                "final": "true",
                "minLevel": "Warning",
                "writeTo": "database"
            },
            {
                "logger": "SchoolWeb.API.*",
                "final": "true",
                "maxLevel": "Trace"
            },
            {
                "logger": "SchoolWeb.API.*",
                "final": "true",
                "minLevel": "Debug",
                "writeTo": "database"
            },
            {
                "logger": "*",
                "minLevel": "Warning",
                "writeTo": "database"
            }
        ]
    }
}
